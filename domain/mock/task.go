// Code generated by MockGen. DO NOT EDIT.
// Source: domain/task.go
//
// Generated by this command:
//
//	mockgen -source=domain/task.go -destination=domain/mock/task.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	domain "togo/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskService) CreateTask(userID uint, task domain.Task) (domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", userID, task)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServiceMockRecorder) CreateTask(userID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskService)(nil).CreateTask), userID, task)
}

// DeleteTask mocks base method.
func (m *MockTaskService) DeleteTask(userID, taskID uint) domain.ResponseError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", userID, taskID)
	ret0, _ := ret[0].(domain.ResponseError)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskServiceMockRecorder) DeleteTask(userID, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskService)(nil).DeleteTask), userID, taskID)
}

// FetchTask mocks base method.
func (m *MockTaskService) FetchTask(userID uint) ([]domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTask", userID)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// FetchTask indicates an expected call of FetchTask.
func (mr *MockTaskServiceMockRecorder) FetchTask(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTask", reflect.TypeOf((*MockTaskService)(nil).FetchTask), userID)
}

// GetTaskByID mocks base method.
func (m *MockTaskService) GetTaskByID(userID, taskID uint) (domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", userID, taskID)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskServiceMockRecorder) GetTaskByID(userID, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskService)(nil).GetTaskByID), userID, taskID)
}

// UpdateTask mocks base method.
func (m *MockTaskService) UpdateTask(userID, taskID uint, task domain.Task) (domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", userID, taskID, task)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskServiceMockRecorder) UpdateTask(userID, taskID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskService)(nil).UpdateTask), userID, taskID, task)
}

// UpdateTaskLimit mocks base method.
func (m *MockTaskService) UpdateTaskLimit(userID, targetUserID uint, taskLimitPerDay int) domain.ResponseError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskLimit", userID, targetUserID, taskLimitPerDay)
	ret0, _ := ret[0].(domain.ResponseError)
	return ret0
}

// UpdateTaskLimit indicates an expected call of UpdateTaskLimit.
func (mr *MockTaskServiceMockRecorder) UpdateTaskLimit(userID, targetUserID, taskLimitPerDay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskLimit", reflect.TypeOf((*MockTaskService)(nil).UpdateTaskLimit), userID, targetUserID, taskLimitPerDay)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepository) CreateTask(userID uint, task domain.Task) (domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", userID, task)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryMockRecorder) CreateTask(userID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepository)(nil).CreateTask), userID, task)
}

// CreateTaskManagerIfNotExists mocks base method.
func (m *MockTaskRepository) CreateTaskManagerIfNotExists(userID uint) (domain.TaskManager, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskManagerIfNotExists", userID)
	ret0, _ := ret[0].(domain.TaskManager)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// CreateTaskManagerIfNotExists indicates an expected call of CreateTaskManagerIfNotExists.
func (mr *MockTaskRepositoryMockRecorder) CreateTaskManagerIfNotExists(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskManagerIfNotExists", reflect.TypeOf((*MockTaskRepository)(nil).CreateTaskManagerIfNotExists), userID)
}

// DeleteTask mocks base method.
func (m *MockTaskRepository) DeleteTask(taskID uint) domain.ResponseError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskID)
	ret0, _ := ret[0].(domain.ResponseError)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryMockRecorder) DeleteTask(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepository)(nil).DeleteTask), taskID)
}

// FetchTaskByUserID mocks base method.
func (m *MockTaskRepository) FetchTaskByUserID(userID uint) ([]domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskByUserID", userID)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// FetchTaskByUserID indicates an expected call of FetchTaskByUserID.
func (mr *MockTaskRepositoryMockRecorder) FetchTaskByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskByUserID", reflect.TypeOf((*MockTaskRepository)(nil).FetchTaskByUserID), userID)
}

// GetTaskByID mocks base method.
func (m *MockTaskRepository) GetTaskByID(taskID uint) (domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", taskID)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskRepositoryMockRecorder) GetTaskByID(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskRepository)(nil).GetTaskByID), taskID)
}

// GetTaskManagerByID mocks base method.
func (m *MockTaskRepository) GetTaskManagerByID(taskManagerID uint) (domain.TaskManager, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskManagerByID", taskManagerID)
	ret0, _ := ret[0].(domain.TaskManager)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// GetTaskManagerByID indicates an expected call of GetTaskManagerByID.
func (mr *MockTaskRepositoryMockRecorder) GetTaskManagerByID(taskManagerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskManagerByID", reflect.TypeOf((*MockTaskRepository)(nil).GetTaskManagerByID), taskManagerID)
}

// GetTaskManagerByUserID mocks base method.
func (m *MockTaskRepository) GetTaskManagerByUserID(userID uint) (domain.TaskManager, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskManagerByUserID", userID)
	ret0, _ := ret[0].(domain.TaskManager)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// GetTaskManagerByUserID indicates an expected call of GetTaskManagerByUserID.
func (mr *MockTaskRepositoryMockRecorder) GetTaskManagerByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskManagerByUserID", reflect.TypeOf((*MockTaskRepository)(nil).GetTaskManagerByUserID), userID)
}

// SetTaskLimit mocks base method.
func (m *MockTaskRepository) SetTaskLimit(userID uint, taskLimitPerDay int) (domain.TaskManager, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTaskLimit", userID, taskLimitPerDay)
	ret0, _ := ret[0].(domain.TaskManager)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// SetTaskLimit indicates an expected call of SetTaskLimit.
func (mr *MockTaskRepositoryMockRecorder) SetTaskLimit(userID, taskLimitPerDay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskLimit", reflect.TypeOf((*MockTaskRepository)(nil).SetTaskLimit), userID, taskLimitPerDay)
}

// UpdateTask mocks base method.
func (m *MockTaskRepository) UpdateTask(taskID uint, task domain.Task) (domain.Task, domain.ResponseError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", taskID, task)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(domain.ResponseError)
	return ret0, ret1
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryMockRecorder) UpdateTask(taskID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTask), taskID, task)
}
